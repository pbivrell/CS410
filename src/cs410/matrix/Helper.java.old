package cs410.matrix;

import Jama.Matrix;

public class Helper {
    
    public static double[] vectorSubtract(double[] a, double[] b){
        assert(a.length == b.length);
        double[] res = new double[a.length];
        for(int i = 0; i < a.length; i++){
            res[i] = a[i] - b[i];
        }
        return res;
    }

    public static String printMatrix(Matrix m){
        double[][] raw =  m.getArray();
        String res = "";
        res += m.getRowDimension() + "," + m.getColumnDimension() + "\n";
        for(double[] col: raw){
            for(double item: col){
                res += String.format("%.3f ", item);
            }
            res += "\n";
        }
        return res;
    }

    public static Matrix makeUnitLength(Matrix m){
        if(m.norm1() == 0){
            return m;
        }
        return m.times(1/m.norm2());
    }

    public static Matrix crossProduct(Matrix u, Matrix v){
        double u1, u2, u3, v1, v2, v3;
        u1 = u.get(0,0); u2 = u.get(0,1); u3 = u.get(0,2);
        v1 = v.get(0,0); v2 = v.get(0,1); v3 = v.get(0,2);

        double uvi, uvj, uvk;
        uvi = u2 * v3 - v2 * u3;
        uvj = v1 * u3 - u1 * v3;
        uvk = u1 * v2 - v1 * u2;

        return new Matrix(new double[] { uvi, uvj, uvk },1);
    }
}

